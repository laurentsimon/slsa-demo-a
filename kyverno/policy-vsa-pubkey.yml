apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: vsa-pub
spec:
  validationFailureAction: Enforce
  webhookTimeoutSeconds: 30
  rules:
    - name: vsa-pub
      match:
        any:
          - resources:
              kinds:
                - Pod
      context:
        - name: configuration
          configMap:
            name: configuration
            namespace: default

      # TODO: image must match the SDA's subject
      verifyImages:
        # imageReferences sets which images the policy will apply to.
        # Replace with your image. Wildcard values are supported.
        # TODO: use * and match the image name in the attestation.
        - imageReferences:
            - "*"
          attestations:
            - predicateType: "https://slsa.dev/deploy/v1?no_policy_version"
              attestors:
              - entries:
                # - keyless:
                #     subject: "{{ verifier_id }}@{{ verifier_ref }}"
                #     issuer: "{{ verifier_sigstore_issuer }}"
                #     rekor:
                #       url: "{{ verifier_sigstore_rekor_url }}"
                - keys:
                    # NOTE:
                    # cosign generate-key-pair
                    # cosign attest --key cosign.key --yes --type https://slsa.dev/deploy/v1 --predicate attestations/sda.json ${IMAGE}
                    # cosign verify-attestation ${IMAGE} --key cosign.pub --type https://slsa.dev/deploy/v1
                    # WARNING: using config map does _not_ work.
                    publicKeys: |-
                              -----BEGIN PUBLIC KEY-----
                              MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhKJsOh7B3CjEVpQb+PHhmujiSoIw
                              AEiqzqoL/FzI6S4EBt8phXqlcNmOdTAITEP/eZGEDUIieIIjsV/6wSgzpQ==
                              -----END PUBLIC KEY-----
                      
              # TODO: Use configMap.
              conditions:
                - all:
                  - key: "{{ deployResult }}"
                    operator: Equals
                    value: "ALLOW"
                    message: "expected ALLOW, got {{ deployResult }}"
                    
                  # Compulsory: Verify the image name in the attestation's provenance.
                  # TODO: Patch kyverno to be able to reference the subject name.
                  # To figure out the request info, enable --dumpPayload=true and --v=6 for kyverno-admission-controller at install.
                  # Q: Why do we duplicate subject and rsourceUri
                  #- key: "{{ subject[0].name }}"
                  - key: "{{ resourceUri }}"
                    operator: Equals
                    value: "{{ image.registry }}/{{ image.path }}"
                    message: "expected {{ image.registry }}/{{ image.path }}, got {{ resourceUri }}"

                  # NOTE: image digest is verified by Kyverno.

                  # Compulsory: Verify the policy uri.
                  - key: "{{ policy.uri }}"
                    operator: Equals
                    value: "{{ configuration.data.policy_uri }}"
                    message: "expected {{ configuration.data.policy_uri }}, got {{ policy.uri }}"

                  # Optional: Verify policy version.
                  - key: "{{ policy.version || '' }}"
                    operator: Equals
                    value: "{{ configuration.data.policy_version || '*' }}"
                    message: "expected {{ configuration.data.policy_version || '(any)' }}, got {{ policy.version || '(null)' }}"

                  # Optional: Verify policy ref.
                  - key: "{{ policy.ref || '' }}"
                    operator: Equals
                    value: "{{ configuration.data.policy_ref || '*' }}"
                    message: "expected {{ configuration.data.policy_ref || '(any)' }}, got {{ policy.ref || '(null)' }}"

                  # TODO: verify time
                  # https://kyverno.io/blog/2023/02/19/new-time-related-jmespath-filters-in-kyverno/
                  # https://main.kyverno.io/docs/writing-policies/jmespath/

                  # Compulsory: Verify verifier id in attestation.
                  - key: "{{ verifier.id }}"
                    operator: Equals
                    value: "{{ configuration.data.verifier_id }}"
                    message: "expected {{ configuration.data.verifier_id }}, got {{ verifier.id }}"

                  # Optional: Verify verifier ref in attestation.
                  - key: "{{ verifier.ref || '' }}"
                    operator: Equals
                    value: "{{ configuration.data.verifier_ref || '*' }}"
                    message: "expected {{ configuration.data.verifier_ref || '(any)' }}, got {{ verifier.ref || '(null)' }}"
